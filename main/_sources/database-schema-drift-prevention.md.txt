# Database Schema Drift Prevention

This document explains the automated schema drift detection system implemented in SmartEM Decisions to ensure database schema consistency across environments.

## What is Schema Drift?

Schema drift occurs when SQLModel definitions (your Python data models) change but the corresponding Alembic database migrations haven't been updated. This creates a mismatch between:

- What your code expects the database schema to look like (SQLModel definitions)
- What the actual database schema looks like (current migration state)

This can lead to runtime errors, deployment failures, and data integrity issues.

## How Our Detection Works

Our schema drift detection system automatically catches these mismatches in CI/CD by:

1. **Setting up a temporary database** - Creates a clean PostgreSQL database for testing
2. **Applying existing migrations** - Runs all current Alembic migrations to establish the "official" schema state
3. **Comparing with SQLModel definitions** - Uses Alembic's autogenerate feature to detect what new migrations would be needed
4. **Reporting drift** - Fails the CI build if any schema changes are detected

## When the Check Runs

The schema drift check runs automatically:

- On every pull request to `main`
- On every push to `main`
- On manual workflow dispatch
- Skipped for draft PRs with `[WIP]` prefix

## What Happens When Drift is Detected

If schema drift is detected, the CI build will fail with a clear error message:

```
SCHEMA DRIFT DETECTED!

Your SQLModel definitions have changed but migrations haven't been updated.
This means the database schema is out of sync with your model definitions.

To fix this:
1. Run: alembic revision --autogenerate -m 'description of changes'
2. Review the generated migration file
3. Test the migration: alembic upgrade head
4. Commit the new migration file
```

## How to Fix Schema Drift

When you modify SQLModel definitions (add/remove fields, change types, etc.), follow these steps:

### 1. Generate the Migration

```bash
# Activate your virtual environment
source .venv/bin/activate

# Generate a new migration based on model changes
alembic revision --autogenerate -m "Add user_preferences table"
```

### 2. Review the Generated Migration

Alembic will create a new file in `src/smartem_backend/migrations/versions/`. **Always review this file** to ensure:

- The changes match your intentions
- No unintended schema modifications are included
- Data migration logic is correct (if needed)

### 3. Test the Migration

```bash
# Test applying the migration
alembic upgrade head

# Test downgrading (optional but recommended)
alembic downgrade -1
alembic upgrade head
```

### 4. Commit the Migration

```bash
git add src/smartem_backend/migrations/versions/[new_migration_file].py
git commit -m "Add migration for user preferences table"
```

## Running the Check Locally

You can run the schema drift check locally before pushing:

```bash
# Ensure you have a PostgreSQL instance running and .env.k8s.development configured
python tools/check_schema_drift.py
```

The script will:
- Create a temporary database
- Apply existing migrations
- Check for drift
- Clean up the temporary database
- Exit with code 0 (success) or 1 (drift detected)

## Advanced Usage

### Custom Database Configuration

The script uses environment variables from `.env.k8s.development`:

```bash
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=your_user
POSTGRES_PASSWORD=your_password
```

### Debugging Migration Issues

If you encounter issues with the drift detection:

1. **Check migration files** - Ensure all migration files are committed
2. **Verify database connectivity** - Test connection with your PostgreSQL instance
3. **Review SQLModel imports** - Make sure all models are properly imported in `smartem_backend/model/database.py`
4. **Check Alembic configuration** - Verify `alembic.ini` and `env.py` are correctly configured

### CI/CD Integration Details

The schema drift check is implemented as a reusable GitHub Actions workflow:

- **Workflow file**: `.github/workflows/_schema_drift.yml`
- **Called from**: `.github/workflows/ci.yml`
- **Dependencies**: Runs after basic checks pass
- **Services**: Uses PostgreSQL 15 service container

## Best Practices

### For Developers

1. **Always run locally first** - Test schema changes before pushing
2. **Descriptive migration messages** - Use clear, descriptive names for migrations
3. **Small, focused changes** - Avoid large schema changes in single migrations
4. **Review autogenerated migrations** - Don't blindly trust autogenerate output

### For Reviews

When reviewing PRs with database changes:

1. **Check for migration files** - Ensure SQLModel changes include corresponding migrations
2. **Review migration logic** - Verify the migration does what it claims
3. **Consider data safety** - Check for potentially destructive operations
4. **Test migration reversal** - Ensure migrations can be safely downgraded

## Troubleshooting

### Common Issues

**Issue**: "Environment variable POSTGRES_X not set"
- **Solution**: Ensure `.env.k8s.development` is properly configured with database credentials

**Issue**: "Error creating temporary database"
- **Solution**: Verify PostgreSQL is running and credentials are correct

**Issue**: "Error running existing migrations"
- **Solution**: Check that all migration files are valid and database is accessible

**Issue**: False positive drift detection
- **Solution**: Ensure all SQLModel classes are imported in the migration env.py

### Getting Help

If you encounter issues with the schema drift detection system:

1. Check the CI logs for specific error messages
2. Run the check locally for faster debugging
3. Verify your local database setup matches the expected configuration
4. Consult the team for complex migration scenarios

## Technical Implementation

### Script Architecture

The `check_schema_drift.py` script follows this flow:

```python
def main():
    # 1. Create temporary database
    db_url = setup_test_database()

    try:
        # 2. Apply existing migrations
        run_existing_migrations(db_url)

        # 3. Check for new migrations needed
        has_drift = check_for_new_migrations(db_url)

        # 4. Report results
        if has_drift:
            sys.exit(1)  # Fail CI
        else:
            print("No drift detected")

    finally:
        # 5. Clean up
        cleanup_test_database(db_url)
```

### Security Considerations

- Temporary databases use unique names to avoid conflicts
- Database credentials are loaded from environment variables
- Temporary resources are always cleaned up, even on failure
- No production data is accessed during drift detection

This system ensures that database schema changes are always properly tracked through migrations, maintaining consistency across development, testing, and production environments.
