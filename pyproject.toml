[build-system]
requires = ["setuptools>=64", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "smartem-decisions"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.12",
]
description = "A proof of concept for a decision engine to automate CryoEM workflows for structural biology"
dependencies = [] # Note: this section is empty by design, use `pip install -e .[all]`
dynamic = ["version"]
license.file = "LICENSE"
readme = "README.md"
requires-python = ">=3.12"

[project.optional-dependencies]
# Development dependencies
dev = [
    "copier",
    "fastapi[standard]",
    "myst-parser",
    "pipdeptree",
    "pre-commit",
    "pydata-sphinx-theme>=0.12",
    "pyright",
    "pytest",
    "pytest-cov",
    "requests",
    "ruff",
    "sphinx-autobuild",
    "sphinx-copybutton",
    "sphinx-design",
    "tox-direct",
    "types-mock",
]

# Common dependencies (shared by all production components)
common = [
    "python-dotenv==1.1.0",
    "pyyaml",
    "rich",
    "typer==0.15.4",
]

# Core system component dependencies
core = [
    "smartem-decisions[common]",
    "pika==1.3.2",
    "pydantic==2.11.4",
    "fastapi==0.115.12",
    "graypy==2.1.0",
    "psycopg2-binary==2.9.10",
    "sqlmodel==0.0.24",
]

# Data intake component dependencies
data-intake = [
    "smartem-decisions[common]",
    "lxml==5.4.0",
    "watchdog==6.0.0",
]

# Combined dependencies (for convenience)
all = [
    "smartem-decisions[dev,core,data-intake]",
]

[project.scripts]
smartem_epu_data_intake_tools = "epu_data_intake.__main__:main"

[project.urls]
GitHub = "https://github.com/DiamondLightSource/smartem-decisions"

[[project.authors]] # Further authors may be added by duplicating this section
email = "daniel.hatton@diamond.ac.uk"
name = "Daniel Hatton"

[[project.authors]] # Further authors may be added by duplicating this section
email = "val.redchenko@diamond.ac.uk"
name = "Val Redchenko"

[tool.setuptools]
packages = [
    "smartem_decisions",
    "epu_data_intake"
]
package-dir = {"" = "src"}

[tool.setuptools_scm]
version_file = "src/_version.py"

[tool.pyright]
typeCheckingMode = "standard"
reportMissingImports = false # Ignore missing stubs in imported modules

[tool.pytest.ini_options]
# Run pytest with all our checkers, and don't spam us with massive tracebacks on error
addopts = """
    --tb=native -vv --doctest-modules --doctest-glob="*.rst"
    """
# https://iscinumpy.gitlab.io/post/bound-version-constraints/#watch-for-warnings
filterwarnings = "error"
# Doctest python code in docs, python code in src docstrings, test functions in tests
testpaths = "docs src tests"

[tool.coverage.run]
data_file = "/tmp/core.coverage"

[tool.coverage.paths]
# Tests are run from installed location, map back to the src directory
source = ["src", "**/site-packages/"]

# tox must currently be configured via an embedded ini string
# See: https://github.com/tox-dev/tox/issues/999
[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist=False
# Add setuptools to the build requirements
requires = setuptools>=64.0.0

[testenv:{pre-commit,type-checking,tests,docs}]
exclude = docs/assets/
extras =
    tests: dev
    docs: dev
    pre-commit: dev
    type-checking: dev
commands_pre =
    pip install -e .[all]
passenv = *
allowlist_externals =
    pytest
    pre-commit
    pyright
    sphinx-build
    sphinx-autobuild
    pip
commands =
    pre-commit: pre-commit run --all-files --show-diff-on-failure {posargs}
    type-checking: pyright src tests {posargs}
    tests: pytest {posargs}
    docs: sphinx-{posargs:build -E --keep-going} -T docs build/html
"""
# To treat warnings as errors: `docs: sphinx-{posargs:build -EW --keep-going} -T docs build/html`

[tool.ruff]
src = ["src", "tests"]
line-length = 120
lint.select = [
    "B",   # flake8-bugbear - https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "C4",  # flake8-comprehensions - https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "E",   # pycodestyle errors - https://docs.astral.sh/ruff/rules/#error-e
    "F",   # pyflakes rules - https://docs.astral.sh/ruff/rules/#pyflakes-f
    "W",   # pycodestyle warnings - https://docs.astral.sh/ruff/rules/#warning-w
    "I",   # isort - https://docs.astral.sh/ruff/rules/#isort-i
    "UP",  # pyupgrade - https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "SLF", # self - https://docs.astral.sh/ruff/settings/#lintflake8-self
]

[tool.ruff.lint.per-file-ignores]
# By default, private member access is allowed in tests
# See https://github.com/DiamondLightSource/python-copier-template/issues/154
# Remove this line to forbid private member access in tests
"tests/**/*" = ["SLF001"]
