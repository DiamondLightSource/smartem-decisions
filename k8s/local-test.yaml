apiVersion: v1
kind: Namespace
metadata:
  name: smartem-decisions

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: smartem-config
  namespace: smartem-decisions
data:
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "smartem_db"
  RABBITMQ_HOST: "rabbitmq-service"
  RABBITMQ_PORT: "5672"
  HTTP_API_PORT: "8000"
  ADMINER_PORT: "8080"

---

apiVersion: v1
kind: Secret
metadata:
  name: smartem-secrets
  namespace: smartem-decisions
type: Opaque
data:
  POSTGRES_USER: dXNlcm5hbWU=
  POSTGRES_PASSWORD: cGFzc3dvcmQ=
  RABBITMQ_USER: dXNlcm5hbWU=
  RABBITMQ_PASSWORD: cGFzc3dvcmQ=

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: smartem-decisions
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          value: smartem_db
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
      volumes:
      - name: postgres-storage
        emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: smartem-decisions
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-external
  namespace: smartem-decisions
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    nodePort: 30432
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: smartem-decisions
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:management
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: RABBITMQ_USER
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: RABBITMQ_PASSWORD
        ports:
        - containerPort: 5672
        - containerPort: 15672
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
        - name: rabbitmq-logs
          mountPath: /var/log/rabbitmq
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
      volumes:
      - name: rabbitmq-data
        emptyDir: {}
      - name: rabbitmq-logs
        emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: smartem-decisions
spec:
  selector:
    app: rabbitmq
  ports:
  - name: amqp
    port: 5672
    targetPort: 5672
  - name: management
    port: 15672
    targetPort: 15672
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-external
  namespace: smartem-decisions
spec:
  selector:
    app: rabbitmq
  ports:
  - name: amqp
    port: 5672
    targetPort: 5672
    nodePort: 30672
  - name: management
    port: 15672
    targetPort: 15672
    nodePort: 30673
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: smartem-decisions
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:5
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
      volumes:
      - name: mongodb-storage
        emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: smartem-decisions
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: smartem-decisions
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
        env:
        - name: http.host
          value: "0.0.0.0"
        - name: transport.host
          value: "localhost"
        - name: network.host
          value: "0.0.0.0"
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        - name: discovery.type
          value: "single-node"
        ports:
        - containerPort: 9200
        - containerPort: 9300
        volumeMounts:
        - name: elasticsearch-storage
          mountPath: /usr/share/elasticsearch/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: elasticsearch-storage
        emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-service
  namespace: smartem-decisions
spec:
  selector:
    app: elasticsearch
  ports:
  - name: http
    port: 9200
    targetPort: 9200
  - name: transport
    port: 9300
    targetPort: 9300
  type: ClusterIP




---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  namespace: smartem-decisions
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer:latest
        env:
        - name: ADMINER_DEFAULT_SERVER
          value: postgres-service
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---

apiVersion: v1
kind: Service
metadata:
  name: adminer-external
  namespace: smartem-decisions
spec:
  selector:
    app: adminer
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30808
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: smartem-http-api
  namespace: smartem-decisions
  labels:
    app: smartem-http-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: smartem-http-api
  template:
    metadata:
      labels:
        app: smartem-http-api
    spec:
      imagePullSecrets:
      - name: ghcr-secret
      containers:
      - name: smartem-http-api
        image: ghcr.io/diamondlightsource/smartem-decisions:latest
        ports:
        - containerPort: 8000
        env:
        - name: ROLE
          value: "api"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: POSTGRES_PASSWORD
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: RABBITMQ_USER
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: RABBITMQ_PASSWORD
        envFrom:
        - configMapRef:
            name: smartem-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: smartem-worker
  namespace: smartem-decisions
  labels:
    app: smartem-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: smartem-worker
  template:
    metadata:
      labels:
        app: smartem-worker
    spec:
      imagePullSecrets:
      - name: ghcr-secret
      containers:
      - name: smartem-worker
        image: ghcr.io/diamondlightsource/smartem-decisions:latest
        env:
        - name: ROLE
          value: "worker"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: POSTGRES_PASSWORD
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: RABBITMQ_USER
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smartem-secrets
              key: RABBITMQ_PASSWORD
        envFrom:
        - configMapRef:
            name: smartem-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---

apiVersion: v1
kind: Service
metadata:
  name: smartem-http-api-service
  namespace: smartem-decisions
  labels:
    app: smartem-http-api
spec:
  selector:
    app: smartem-http-api
  ports:
  - name: http
    port: 80
    targetPort: 8000
    nodePort: 30080
    protocol: TCP
  type: NodePort
