# coding: utf-8

"""
    Decision Service API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cryoem_client.api_client import ApiClient


class NameValueStoreApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_name_value_store_post(self, **kwargs):  # noqa: E501
        """Creates a new name-value record.  # noqa: E501

        Sample request:        POST      {                  \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",          \"areaId\": 1,          \"name\": \"metadata\",          \"value\": \"value\",          \"timestamp\": \"2021-02-26T12:45:18.076Z\",          \"setBy\": \"Swagger\"      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_name_value_store_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NameValueRecord body: The record to be inserted.
        :return: NameValueRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_name_value_store_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_name_value_store_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_name_value_store_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new name-value record.  # noqa: E501

        Sample request:        POST      {                  \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",          \"areaId\": 1,          \"name\": \"metadata\",          \"value\": \"value\",          \"timestamp\": \"2021-02-26T12:45:18.076Z\",          \"setBy\": \"Swagger\"      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_name_value_store_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NameValueRecord body: The record to be inserted.
        :return: NameValueRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_name_value_store_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/NameValueStore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameValueRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_name_value_store_session_id_value_id_get(self, session_id, id, **kwargs):  # noqa: E501
        """Get name-value record with provided id.  # noqa: E501

        Sample request:        ../NameValueStore/{sessionId}/Value/{id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_name_value_store_session_id_value_id_get(session_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int id: Name-value record id. (required)
        :return: NameValueRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_name_value_store_session_id_value_id_get_with_http_info(session_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_name_value_store_session_id_value_id_get_with_http_info(session_id, id, **kwargs)  # noqa: E501
            return data

    def api_v1_name_value_store_session_id_value_id_get_with_http_info(self, session_id, id, **kwargs):  # noqa: E501
        """Get name-value record with provided id.  # noqa: E501

        Sample request:        ../NameValueStore/{sessionId}/Value/{id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_name_value_store_session_id_value_id_get_with_http_info(session_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int id: Name-value record id. (required)
        :return: NameValueRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_name_value_store_session_id_value_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_name_value_store_session_id_value_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_name_value_store_session_id_value_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/NameValueStore/{sessionId}/Value/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameValueRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_name_value_store_session_id_values_get(self, session_id, **kwargs):  # noqa: E501
        """Get all name-value records for the given application session, optionally filtered by area type or/and name.  # noqa: E501

        Sample request:        ../NameValueStore/{sessionId}/Values?areaId=3      ../NameValueStore/{sessionId}/Values?name=CoordinatesInParent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_name_value_store_session_id_values_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the session.
        :param str name: The name given to the record.
        :return: list[NameValueRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_name_value_store_session_id_values_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_name_value_store_session_id_values_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_name_value_store_session_id_values_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get all name-value records for the given application session, optionally filtered by area type or/and name.  # noqa: E501

        Sample request:        ../NameValueStore/{sessionId}/Values?areaId=3      ../NameValueStore/{sessionId}/Values?name=CoordinatesInParent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_name_value_store_session_id_values_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the session.
        :param str name: The name given to the record.
        :return: list[NameValueRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'area_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_name_value_store_session_id_values_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_name_value_store_session_id_values_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/NameValueStore/{sessionId}/Values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NameValueRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_name_value_stores_post(self, **kwargs):  # noqa: E501
        """Register multiple name-value records.  # noqa: E501

        Sample request:        POST      [          {              \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",              \"areaId\": 1,              \"name\": \"name1\",              \"value\": \"value1\",              \"setBy\": \"Swagger\"          },          {              \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",               \"areaId\": 1,              \"name\": \"name2\",              \"value\": \"value2\",              \"setBy\": \"Swagger\"          }      ]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_name_value_stores_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[NameValueRecord] body: The name-value records to be registered.
        :return: list[NameValueRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_name_value_stores_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_name_value_stores_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_name_value_stores_post_with_http_info(self, **kwargs):  # noqa: E501
        """Register multiple name-value records.  # noqa: E501

        Sample request:        POST      [          {              \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",              \"areaId\": 1,              \"name\": \"name1\",              \"value\": \"value1\",              \"setBy\": \"Swagger\"          },          {              \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",               \"areaId\": 1,              \"name\": \"name2\",              \"value\": \"value2\",              \"setBy\": \"Swagger\"          }      ]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_name_value_stores_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[NameValueRecord] body: The name-value records to be registered.
        :return: list[NameValueRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_name_value_stores_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/NameValueStores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NameValueRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
