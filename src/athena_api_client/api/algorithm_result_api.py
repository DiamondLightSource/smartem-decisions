# coding: utf-8

"""
    Decision Service API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cryoem_client.api_client import ApiClient


class AlgorithmResultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_session_session_id_algorithm_result_get(self, session_id, **kwargs):  # noqa: E501
        """Get algorithm result using session id, name and area id.  # noqa: E501

        Sample request:        ../Session/{sessionId}/AlgorithmResult?areaId=12&name=motioncorrection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_algorithm_result_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the session.
        :param AlgorithmResultType name: Name type of the algorithm result.
        :return: AlgorithmResultRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_algorithm_result_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_algorithm_result_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_algorithm_result_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get algorithm result using session id, name and area id.  # noqa: E501

        Sample request:        ../Session/{sessionId}/AlgorithmResult?areaId=12&name=motioncorrection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_algorithm_result_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the session.
        :param AlgorithmResultType name: Name type of the algorithm result.
        :return: AlgorithmResultRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'area_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_algorithm_result_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_algorithm_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/AlgorithmResult', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlgorithmResultRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_algorithm_results_get(self, session_id, **kwargs):  # noqa: E501
        """Get all algorithm results using session id, name and parent area id.  # noqa: E501

        Sample request:        ../Session/{sessionId}/AlgorithmResult?parentAreaId=12&name=motioncorrection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_algorithm_results_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int parent_area_id: Uniquely identifies the parent area within the session.
        :param AlgorithmResultType name: Name of the algorithm result.
        :return: list[AlgorithmResultRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_algorithm_results_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_algorithm_results_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_algorithm_results_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get all algorithm results using session id, name and parent area id.  # noqa: E501

        Sample request:        ../Session/{sessionId}/AlgorithmResult?parentAreaId=12&name=motioncorrection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_algorithm_results_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int parent_area_id: Uniquely identifies the parent area within the session.
        :param AlgorithmResultType name: Name of the algorithm result.
        :return: list[AlgorithmResultRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'parent_area_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_algorithm_results_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_algorithm_results_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'parent_area_id' in params:
            query_params.append(('parentAreaId', params['parent_area_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/AlgorithmResults', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AlgorithmResultRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_latest_algorithm_result_get(self, session_id, **kwargs):  # noqa: E501
        """Get latest algorithm result using session id, name and parent area id.  # noqa: E501

        Sample request:        ../Session/{sessionId}/LatestAlgorithmResult?parentAreaId=12&name=motioncorrection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_latest_algorithm_result_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int parent_area_id: Uniquely identifies the parent area within the session.
        :param AlgorithmResultType name: Name of the algorithm result.
        :return: AlgorithmResultRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_latest_algorithm_result_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_latest_algorithm_result_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_latest_algorithm_result_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get latest algorithm result using session id, name and parent area id.  # noqa: E501

        Sample request:        ../Session/{sessionId}/LatestAlgorithmResult?parentAreaId=12&name=motioncorrection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_latest_algorithm_result_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int parent_area_id: Uniquely identifies the parent area within the session.
        :param AlgorithmResultType name: Name of the algorithm result.
        :return: AlgorithmResultRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'parent_area_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_latest_algorithm_result_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_latest_algorithm_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'parent_area_id' in params:
            query_params.append(('parentAreaId', params['parent_area_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/LatestAlgorithmResult', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlgorithmResultRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
