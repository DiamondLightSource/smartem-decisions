# coding: utf-8

"""
    Decision Service API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cryoem_client.api_client import ApiClient


class AreaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_area_post(self, **kwargs):  # noqa: E501
        """Register an area.  # noqa: E501

        Sample request:        POST      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"id\" : 12,        \"areaType\" : \"gridsquare\"      }        or        POST      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"id\" : 1213,        \"areaType\" : \"foilhole\",        \"parentId\" : 12      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_area_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Area body: The area to be registered.
        :return: Area
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_area_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_area_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_area_post_with_http_info(self, **kwargs):  # noqa: E501
        """Register an area.  # noqa: E501

        Sample request:        POST      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"id\" : 12,        \"areaType\" : \"gridsquare\"      }        or        POST      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"id\" : 1213,        \"areaType\" : \"foilhole\",        \"parentId\" : 12      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_area_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Area body: The area to be registered.
        :return: Area
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_area_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Area', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Area',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_area_put(self, **kwargs):  # noqa: E501
        """Update a registered area.  # noqa: E501

        Sample request:        PUT      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"areaType\" : \"gridsquare\",        \"id\" : 12      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_area_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Area body: The area to be updated or to be registered in case not registered yet.
        :return: list[Area]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_area_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_area_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_area_put_with_http_info(self, **kwargs):  # noqa: E501
        """Update a registered area.  # noqa: E501

        Sample request:        PUT      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"areaType\" : \"gridsquare\",        \"id\" : 12      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_area_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Area body: The area to be updated or to be registered in case not registered yet.
        :return: list[Area]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_area_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Area', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Area]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_areas_post(self, **kwargs):  # noqa: E501
        """Register multiple areas.  # noqa: E501

        Sample request:        POST      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"areaType\" : \"gridsquare\",        \"ids\" : [2, 12, 43]      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_areas_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Area] body: The areas to be registered.
        :return: list[Area]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_areas_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_areas_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_areas_post_with_http_info(self, **kwargs):  # noqa: E501
        """Register multiple areas.  # noqa: E501

        Sample request:        POST      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"areaType\" : \"gridsquare\",        \"ids\" : [2, 12, 43]      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_areas_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Area] body: The areas to be registered.
        :return: list[Area]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_areas_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Areas', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Area]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_areas_put(self, **kwargs):  # noqa: E501
        """Update multiple registered areas and register new ones.  # noqa: E501

        Sample request:        PUT      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"areaType\" : \"gridsquare\",        \"ids\" : [2, 12, 43]      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_areas_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Area] body: The areas to be updated or to be registered in case not registered yet.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_areas_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_areas_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_areas_put_with_http_info(self, **kwargs):  # noqa: E501
        """Update multiple registered areas and register new ones.  # noqa: E501

        Sample request:        PUT      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"areaType\" : \"gridsquare\",        \"ids\" : [2, 12, 43]      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_areas_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Area] body: The areas to be updated or to be registered in case not registered yet.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_areas_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Areas', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_area_area_id_get(self, session_id, area_id, **kwargs):  # noqa: E501
        """Get the registered area for application session.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Area/{areaId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_area_area_id_get(session_id, area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the application session. (required)
        :return: Area
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_area_area_id_get_with_http_info(session_id, area_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_area_area_id_get_with_http_info(session_id, area_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_area_area_id_get_with_http_info(self, session_id, area_id, **kwargs):  # noqa: E501
        """Get the registered area for application session.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Area/{areaId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_area_area_id_get_with_http_info(session_id, area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the application session. (required)
        :return: Area
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'area_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_area_area_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_area_area_id_get`")  # noqa: E501
        # verify the required parameter 'area_id' is set
        if ('area_id' not in params or
                params['area_id'] is None):
            raise ValueError("Missing the required parameter `area_id` when calling `api_v1_session_session_id_area_area_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501
        if 'area_id' in params:
            path_params['areaId'] = params['area_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/Area/{areaId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Area',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_area_parent_area_id_areas_get(self, session_id, parent_area_id, **kwargs):  # noqa: E501
        """Get all the registered child areas of the given area.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Area/{parentAreaId}/Areas  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_area_parent_area_id_areas_get(session_id, parent_area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int parent_area_id: Uniquely identifies the parent area in the application session. (required)
        :return: list[Area]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_area_parent_area_id_areas_get_with_http_info(session_id, parent_area_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_area_parent_area_id_areas_get_with_http_info(session_id, parent_area_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_area_parent_area_id_areas_get_with_http_info(self, session_id, parent_area_id, **kwargs):  # noqa: E501
        """Get all the registered child areas of the given area.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Area/{parentAreaId}/Areas  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_area_parent_area_id_areas_get_with_http_info(session_id, parent_area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int parent_area_id: Uniquely identifies the parent area in the application session. (required)
        :return: list[Area]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'parent_area_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_area_parent_area_id_areas_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_area_parent_area_id_areas_get`")  # noqa: E501
        # verify the required parameter 'parent_area_id' is set
        if ('parent_area_id' not in params or
                params['parent_area_id'] is None):
            raise ValueError("Missing the required parameter `parent_area_id` when calling `api_v1_session_session_id_area_parent_area_id_areas_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501
        if 'parent_area_id' in params:
            path_params['parentAreaId'] = params['parent_area_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/Area/{parentAreaId}/Areas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Area]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_areas_get(self, session_id, **kwargs):  # noqa: E501
        """Get all the registered areas for application session, optionally filtered by area type or parent.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Areas?areaType=gridsquare&parentAreaId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_areas_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param AreaType area_type: (Optional)The type of areas to retrieve.
        :param int parent_area_id: (Optional)The parent area of the areas to retrieve.
        :return: list[Area]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_areas_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_areas_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_areas_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get all the registered areas for application session, optionally filtered by area type or parent.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Areas?areaType=gridsquare&parentAreaId=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_areas_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param AreaType area_type: (Optional)The type of areas to retrieve.
        :param int parent_area_id: (Optional)The parent area of the areas to retrieve.
        :return: list[Area]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'area_type', 'parent_area_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_areas_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_areas_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'area_type' in params:
            query_params.append(('areaType', params['area_type']))  # noqa: E501
        if 'parent_area_id' in params:
            query_params.append(('parentAreaId', params['parent_area_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/Areas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Area]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
