# coding: utf-8

"""
    Decision Service API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cryoem_client.api_client import ApiClient


class DecisionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_decision_post(self, **kwargs):  # noqa: E501
        """Register a decision.  # noqa: E501

        Sample request:        POST      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"areaId\" : 12,        \"decisionType\" : \"include\",        \"decisionValue\" : \"false\",        \"decidedBy\" : \"web client\",        \"details\" : \"bad gridsquare\"      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_decision_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DecisionRecord body: The decision to be registered.
        :return: DecisionRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_decision_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_decision_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_decision_post_with_http_info(self, **kwargs):  # noqa: E501
        """Register a decision.  # noqa: E501

        Sample request:        POST      {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",        \"areaId\" : 12,        \"decisionType\" : \"include\",        \"decisionValue\" : \"false\",        \"decidedBy\" : \"web client\",        \"details\" : \"bad gridsquare\"      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_decision_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DecisionRecord body: The decision to be registered.
        :return: DecisionRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_decision_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Decision', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecisionRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_decisions_post(self, **kwargs):  # noqa: E501
        """Register multiple decisions.  # noqa: E501

        Sample request:        POST      {          [              {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",                \"areaId\" : 10,                \"decisionType\" : \"include\",                \"decisionValue\" : \"false\",                \"decidedBy\" : \"web client\"},                \"details\" : \"bad gridsquare\"              },              {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",                \"areaId\" : 11,                \"decisionType\" : \"include\",                \"decisionValue\" : \"false\",                \"decidedBy\" : \"web client\",                \"details\" : \"bad gridsquare\"              }          ]      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_decisions_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DecisionRecord] body: The decisions to be registered.
        :return: list[DecisionRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_decisions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_decisions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_decisions_post_with_http_info(self, **kwargs):  # noqa: E501
        """Register multiple decisions.  # noqa: E501

        Sample request:        POST      {          [              {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",                \"areaId\" : 10,                \"decisionType\" : \"include\",                \"decisionValue\" : \"false\",                \"decidedBy\" : \"web client\"},                \"details\" : \"bad gridsquare\"              },              {                \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",                \"areaId\" : 11,                \"decisionType\" : \"include\",                \"decisionValue\" : \"false\",                \"decidedBy\" : \"web client\",                \"details\" : \"bad gridsquare\"              }          ]      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_decisions_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DecisionRecord] body: The decisions to be registered.
        :return: list[DecisionRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_decisions_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Decisions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DecisionRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_all_decisions_delete(self, session_id, **kwargs):  # noqa: E501
        """Delete all decisions.  # noqa: E501

        Sample request:        ../Session/{sessionId}/AllDecisions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_all_decisions_delete(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_all_decisions_delete_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_all_decisions_delete_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_all_decisions_delete_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Delete all decisions.  # noqa: E501

        Sample request:        ../Session/{sessionId}/AllDecisions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_all_decisions_delete_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_all_decisions_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_all_decisions_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/AllDecisions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_decision_decision_id_get(self, session_id, decision_id, **kwargs):  # noqa: E501
        """Get a specific decision.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Decision/{decisionId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_decision_decision_id_get(session_id, decision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param str decision_id: The id of a specific decision record. (required)
        :return: DecisionRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_decision_decision_id_get_with_http_info(session_id, decision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_decision_decision_id_get_with_http_info(session_id, decision_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_decision_decision_id_get_with_http_info(self, session_id, decision_id, **kwargs):  # noqa: E501
        """Get a specific decision.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Decision/{decisionId}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_decision_decision_id_get_with_http_info(session_id, decision_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param str decision_id: The id of a specific decision record. (required)
        :return: DecisionRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'decision_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_decision_decision_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_decision_decision_id_get`")  # noqa: E501
        # verify the required parameter 'decision_id' is set
        if ('decision_id' not in params or
                params['decision_id'] is None):
            raise ValueError("Missing the required parameter `decision_id` when calling `api_v1_session_session_id_decision_decision_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501
        if 'decision_id' in params:
            path_params['decisionId'] = params['decision_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/Decision/{decisionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecisionRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_decisions_delete(self, session_id, **kwargs):  # noqa: E501
        """Delete all matching decisions. The match is performed on SessionId, AreaId and DecisionType (the later if specified)  # noqa: E501

        Sample request:      ../Session/{sessionId}/Decisions?areaId=12&decisionType=include  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_decisions_delete(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the application session.
        :param DecisionType decision_type: The type of decision.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_decisions_delete_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_decisions_delete_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_decisions_delete_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Delete all matching decisions. The match is performed on SessionId, AreaId and DecisionType (the later if specified)  # noqa: E501

        Sample request:      ../Session/{sessionId}/Decisions?areaId=12&decisionType=include  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_decisions_delete_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the application session.
        :param DecisionType decision_type: The type of decision.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'area_id', 'decision_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_decisions_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_decisions_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'decision_type' in params:
            query_params.append(('decisionType', params['decision_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/Decisions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_decisions_get(self, session_id, **kwargs):  # noqa: E501
        """Get all the decisions that are available for the provided area ids, and optionally filtered by type.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Decisions?areaId=1&areaId=2      ../Session/{sessionId}/Decisions?areaId=1&areaId=2&areaId=3&decisionType=include  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_decisions_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param list[int] area_ids: Uniquely identify the area(s) within the application session.
        :param DecisionType decision_type: The type of decision.
        :param PluginType plugin_type: The plugin was used in taking the decision.
        :return: list[DecisionRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_decisions_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_decisions_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_decisions_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get all the decisions that are available for the provided area ids, and optionally filtered by type.  # noqa: E501

        Sample request:        ../Session/{sessionId}/Decisions?areaId=1&areaId=2      ../Session/{sessionId}/Decisions?areaId=1&areaId=2&areaId=3&decisionType=include  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_decisions_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param list[int] area_ids: Uniquely identify the area(s) within the application session.
        :param DecisionType decision_type: The type of decision.
        :param PluginType plugin_type: The plugin was used in taking the decision.
        :return: list[DecisionRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'area_ids', 'decision_type', 'plugin_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_decisions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_decisions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'area_ids' in params:
            query_params.append(('areaIds', params['area_ids']))  # noqa: E501
            collection_formats['areaIds'] = 'multi'  # noqa: E501
        if 'decision_type' in params:
            query_params.append(('decisionType', params['decision_type']))  # noqa: E501
        if 'plugin_type' in params:
            query_params.append(('pluginType', params['plugin_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/Decisions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DecisionRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_latest_decision_get(self, session_id, **kwargs):  # noqa: E501
        """Get the most recent decision that is available for the given area.  # noqa: E501

        Sample request:        ../Session/{sessionId}/LatestDecision?areaId=12&decisionType=include  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_latest_decision_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the application session.
        :param DecisionType decision_type: The type of decision.
        :param PluginType plugin_type: The plugin was used in taking the decision.
        :return: DecisionRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_latest_decision_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_latest_decision_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_latest_decision_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get the most recent decision that is available for the given area.  # noqa: E501

        Sample request:        ../Session/{sessionId}/LatestDecision?areaId=12&decisionType=include  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_latest_decision_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the application session.
        :param DecisionType decision_type: The type of decision.
        :param PluginType plugin_type: The plugin was used in taking the decision.
        :return: DecisionRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'area_id', 'decision_type', 'plugin_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_latest_decision_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_latest_decision_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'decision_type' in params:
            query_params.append(('decisionType', params['decision_type']))  # noqa: E501
        if 'plugin_type' in params:
            query_params.append(('pluginType', params['plugin_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/LatestDecision', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecisionRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_session_session_id_timed_decision_get(self, session_id, **kwargs):  # noqa: E501
        """Get the most recent decision that is available for the given area.  # noqa: E501

        Sample request:        ../Session/{sessionId}/TimedDecision?areaId=12&timeout=120&decisionType=include                Sample response:                     {       \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",       \"areaId\": 12,       \"decisionType\": \"FoilHoleSelection\",       \"decisionValue\": \"[        {         \"areaId\": 100,         \"result\": \"true\"        },        {         \"areaId\": 101,         \"result\": \"false\"        },        {         \"areaId\": 102,         \"result\": \"true\"        }       ]\",       \"decidedBy\": \"FoilHoleSelection algorithm\",       \"details\": \"bad foilhole\"      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_timed_decision_get(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the application session.
        :param DecisionType decision_type: The type of decision.
        :param int timeout: Timeout window in seconds within which a relevant decision shall be found. If timeout is reached 204 NoContent will be sent.
        :param PluginType plugin_type: The plugin was used in taking the decision.
        :return: DecisionRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_session_session_id_timed_decision_get_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_session_session_id_timed_decision_get_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def api_v1_session_session_id_timed_decision_get_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get the most recent decision that is available for the given area.  # noqa: E501

        Sample request:        ../Session/{sessionId}/TimedDecision?areaId=12&timeout=120&decisionType=include                Sample response:                     {       \"sessionId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",       \"areaId\": 12,       \"decisionType\": \"FoilHoleSelection\",       \"decisionValue\": \"[        {         \"areaId\": 100,         \"result\": \"true\"        },        {         \"areaId\": 101,         \"result\": \"false\"        },        {         \"areaId\": 102,         \"result\": \"true\"        }       ]\",       \"decidedBy\": \"FoilHoleSelection algorithm\",       \"details\": \"bad foilhole\"      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_session_session_id_timed_decision_get_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Uniquely identifies the application session. (required)
        :param int area_id: Uniquely identifies the area within the application session.
        :param DecisionType decision_type: The type of decision.
        :param int timeout: Timeout window in seconds within which a relevant decision shall be found. If timeout is reached 204 NoContent will be sent.
        :param PluginType plugin_type: The plugin was used in taking the decision.
        :return: DecisionRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'area_id', 'decision_type', 'timeout', 'plugin_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_session_session_id_timed_decision_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `api_v1_session_session_id_timed_decision_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'decision_type' in params:
            query_params.append(('decisionType', params['decision_type']))  # noqa: E501
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))  # noqa: E501
        if 'plugin_type' in params:
            query_params.append(('pluginType', params['plugin_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Session/{sessionId}/TimedDecision', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DecisionRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
