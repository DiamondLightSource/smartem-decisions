# coding: utf-8

"""
    Decision Service API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_id': 'str',
        'session_name': 'str',
        'athena_id': 'str',
        'timestamp': 'datetime',
        'grid_type': 'GridType'
    }

    attribute_map = {
        'session_id': 'sessionId',
        'session_name': 'sessionName',
        'athena_id': 'athenaId',
        'timestamp': 'timestamp',
        'grid_type': 'gridType'
    }

    def __init__(self, session_id=None, session_name=None, athena_id=None, timestamp=None, grid_type=None):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501
        self._session_id = None
        self._session_name = None
        self._athena_id = None
        self._timestamp = None
        self._grid_type = None
        self.discriminator = None
        if session_id is not None:
            self.session_id = session_id
        if session_name is not None:
            self.session_name = session_name
        if athena_id is not None:
            self.athena_id = athena_id
        if timestamp is not None:
            self.timestamp = timestamp
        if grid_type is not None:
            self.grid_type = grid_type

    @property
    def session_id(self):
        """Gets the session_id of this Session.  # noqa: E501


        :return: The session_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this Session.


        :param session_id: The session_id of this Session.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def session_name(self):
        """Gets the session_name of this Session.  # noqa: E501


        :return: The session_name of this Session.  # noqa: E501
        :rtype: str
        """
        return self._session_name

    @session_name.setter
    def session_name(self, session_name):
        """Sets the session_name of this Session.


        :param session_name: The session_name of this Session.  # noqa: E501
        :type: str
        """

        self._session_name = session_name

    @property
    def athena_id(self):
        """Gets the athena_id of this Session.  # noqa: E501


        :return: The athena_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._athena_id

    @athena_id.setter
    def athena_id(self, athena_id):
        """Sets the athena_id of this Session.


        :param athena_id: The athena_id of this Session.  # noqa: E501
        :type: str
        """

        self._athena_id = athena_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Session.  # noqa: E501


        :return: The timestamp of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Session.


        :param timestamp: The timestamp of this Session.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def grid_type(self):
        """Gets the grid_type of this Session.  # noqa: E501


        :return: The grid_type of this Session.  # noqa: E501
        :rtype: GridType
        """
        return self._grid_type

    @grid_type.setter
    def grid_type(self, grid_type):
        """Sets the grid_type of this Session.


        :param grid_type: The grid_type of this Session.  # noqa: E501
        :type: GridType
        """

        self._grid_type = grid_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Session, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
