# coding: utf-8

"""
    Decision Service API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Area(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'session_id': 'str',
        'area_type': 'AreaType',
        'parent_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'session_id': 'sessionId',
        'area_type': 'areaType',
        'parent_id': 'parentId'
    }

    def __init__(self, id=None, session_id=None, area_type=None, parent_id=None):  # noqa: E501
        """Area - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._session_id = None
        self._area_type = None
        self._parent_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if session_id is not None:
            self.session_id = session_id
        if area_type is not None:
            self.area_type = area_type
        if parent_id is not None:
            self.parent_id = parent_id

    @property
    def id(self):
        """Gets the id of this Area.  # noqa: E501


        :return: The id of this Area.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Area.


        :param id: The id of this Area.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def session_id(self):
        """Gets the session_id of this Area.  # noqa: E501


        :return: The session_id of this Area.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this Area.


        :param session_id: The session_id of this Area.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def area_type(self):
        """Gets the area_type of this Area.  # noqa: E501


        :return: The area_type of this Area.  # noqa: E501
        :rtype: AreaType
        """
        return self._area_type

    @area_type.setter
    def area_type(self, area_type):
        """Sets the area_type of this Area.


        :param area_type: The area_type of this Area.  # noqa: E501
        :type: AreaType
        """

        self._area_type = area_type

    @property
    def parent_id(self):
        """Gets the parent_id of this Area.  # noqa: E501


        :return: The parent_id of this Area.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Area.


        :param parent_id: The parent_id of this Area.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Area, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Area):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
