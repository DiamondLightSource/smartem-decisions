# coding: utf-8

"""
    Decision Service API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DecisionRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'session_id': 'str',
        'area_id': 'int',
        'decision_type': 'DecisionType',
        'plugin_type': 'PluginType',
        'decision_value': 'str',
        'decided_by': 'str',
        'details': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'session_id': 'sessionId',
        'area_id': 'areaId',
        'decision_type': 'decisionType',
        'plugin_type': 'pluginType',
        'decision_value': 'decisionValue',
        'decided_by': 'decidedBy',
        'details': 'details',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, session_id=None, area_id=None, decision_type=None, plugin_type=None, decision_value=None, decided_by=None, details=None, timestamp=None):  # noqa: E501
        """DecisionRecord - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._session_id = None
        self._area_id = None
        self._decision_type = None
        self._plugin_type = None
        self._decision_value = None
        self._decided_by = None
        self._details = None
        self._timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if session_id is not None:
            self.session_id = session_id
        if area_id is not None:
            self.area_id = area_id
        if decision_type is not None:
            self.decision_type = decision_type
        if plugin_type is not None:
            self.plugin_type = plugin_type
        if decision_value is not None:
            self.decision_value = decision_value
        if decided_by is not None:
            self.decided_by = decided_by
        if details is not None:
            self.details = details
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this DecisionRecord.  # noqa: E501


        :return: The id of this DecisionRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DecisionRecord.


        :param id: The id of this DecisionRecord.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def session_id(self):
        """Gets the session_id of this DecisionRecord.  # noqa: E501


        :return: The session_id of this DecisionRecord.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this DecisionRecord.


        :param session_id: The session_id of this DecisionRecord.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def area_id(self):
        """Gets the area_id of this DecisionRecord.  # noqa: E501


        :return: The area_id of this DecisionRecord.  # noqa: E501
        :rtype: int
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this DecisionRecord.


        :param area_id: The area_id of this DecisionRecord.  # noqa: E501
        :type: int
        """

        self._area_id = area_id

    @property
    def decision_type(self):
        """Gets the decision_type of this DecisionRecord.  # noqa: E501


        :return: The decision_type of this DecisionRecord.  # noqa: E501
        :rtype: DecisionType
        """
        return self._decision_type

    @decision_type.setter
    def decision_type(self, decision_type):
        """Sets the decision_type of this DecisionRecord.


        :param decision_type: The decision_type of this DecisionRecord.  # noqa: E501
        :type: DecisionType
        """

        self._decision_type = decision_type

    @property
    def plugin_type(self):
        """Gets the plugin_type of this DecisionRecord.  # noqa: E501


        :return: The plugin_type of this DecisionRecord.  # noqa: E501
        :rtype: PluginType
        """
        return self._plugin_type

    @plugin_type.setter
    def plugin_type(self, plugin_type):
        """Sets the plugin_type of this DecisionRecord.


        :param plugin_type: The plugin_type of this DecisionRecord.  # noqa: E501
        :type: PluginType
        """

        self._plugin_type = plugin_type

    @property
    def decision_value(self):
        """Gets the decision_value of this DecisionRecord.  # noqa: E501


        :return: The decision_value of this DecisionRecord.  # noqa: E501
        :rtype: str
        """
        return self._decision_value

    @decision_value.setter
    def decision_value(self, decision_value):
        """Sets the decision_value of this DecisionRecord.


        :param decision_value: The decision_value of this DecisionRecord.  # noqa: E501
        :type: str
        """

        self._decision_value = decision_value

    @property
    def decided_by(self):
        """Gets the decided_by of this DecisionRecord.  # noqa: E501


        :return: The decided_by of this DecisionRecord.  # noqa: E501
        :rtype: str
        """
        return self._decided_by

    @decided_by.setter
    def decided_by(self, decided_by):
        """Sets the decided_by of this DecisionRecord.


        :param decided_by: The decided_by of this DecisionRecord.  # noqa: E501
        :type: str
        """

        self._decided_by = decided_by

    @property
    def details(self):
        """Gets the details of this DecisionRecord.  # noqa: E501


        :return: The details of this DecisionRecord.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DecisionRecord.


        :param details: The details of this DecisionRecord.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def timestamp(self):
        """Gets the timestamp of this DecisionRecord.  # noqa: E501


        :return: The timestamp of this DecisionRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DecisionRecord.


        :param timestamp: The timestamp of this DecisionRecord.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DecisionRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecisionRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
