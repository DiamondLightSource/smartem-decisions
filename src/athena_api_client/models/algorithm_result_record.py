# coding: utf-8

"""
    Decision Service API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlgorithmResultRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_id': 'str',
        'area_id': 'int',
        'name': 'str',
        'result': 'dict(str, object)',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'session_id': 'sessionId',
        'area_id': 'areaId',
        'name': 'name',
        'result': 'result',
        'timestamp': 'timestamp'
    }

    def __init__(self, session_id=None, area_id=None, name=None, result=None, timestamp=None):  # noqa: E501
        """AlgorithmResultRecord - a model defined in Swagger"""  # noqa: E501
        self._session_id = None
        self._area_id = None
        self._name = None
        self._result = None
        self._timestamp = None
        self.discriminator = None
        if session_id is not None:
            self.session_id = session_id
        if area_id is not None:
            self.area_id = area_id
        if name is not None:
            self.name = name
        if result is not None:
            self.result = result
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def session_id(self):
        """Gets the session_id of this AlgorithmResultRecord.  # noqa: E501


        :return: The session_id of this AlgorithmResultRecord.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this AlgorithmResultRecord.


        :param session_id: The session_id of this AlgorithmResultRecord.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def area_id(self):
        """Gets the area_id of this AlgorithmResultRecord.  # noqa: E501


        :return: The area_id of this AlgorithmResultRecord.  # noqa: E501
        :rtype: int
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this AlgorithmResultRecord.


        :param area_id: The area_id of this AlgorithmResultRecord.  # noqa: E501
        :type: int
        """

        self._area_id = area_id

    @property
    def name(self):
        """Gets the name of this AlgorithmResultRecord.  # noqa: E501


        :return: The name of this AlgorithmResultRecord.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlgorithmResultRecord.


        :param name: The name of this AlgorithmResultRecord.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def result(self):
        """Gets the result of this AlgorithmResultRecord.  # noqa: E501


        :return: The result of this AlgorithmResultRecord.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AlgorithmResultRecord.


        :param result: The result of this AlgorithmResultRecord.  # noqa: E501
        :type: dict(str, object)
        """

        self._result = result

    @property
    def timestamp(self):
        """Gets the timestamp of this AlgorithmResultRecord.  # noqa: E501


        :return: The timestamp of this AlgorithmResultRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AlgorithmResultRecord.


        :param timestamp: The timestamp of this AlgorithmResultRecord.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlgorithmResultRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlgorithmResultRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
