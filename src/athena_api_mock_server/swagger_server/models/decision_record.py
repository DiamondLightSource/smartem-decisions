# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.decision_type import DecisionType  # noqa: F401,E501
from swagger_server.models.plugin_type import PluginType  # noqa: F401,E501
from swagger_server import util


class DecisionRecord(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, session_id: str=None, area_id: int=None, decision_type: DecisionType=None, plugin_type: PluginType=None, decision_value: str=None, decided_by: str=None, details: str=None, timestamp: datetime=None):  # noqa: E501
        """DecisionRecord - a model defined in Swagger

        :param id: The id of this DecisionRecord.  # noqa: E501
        :type id: str
        :param session_id: The session_id of this DecisionRecord.  # noqa: E501
        :type session_id: str
        :param area_id: The area_id of this DecisionRecord.  # noqa: E501
        :type area_id: int
        :param decision_type: The decision_type of this DecisionRecord.  # noqa: E501
        :type decision_type: DecisionType
        :param plugin_type: The plugin_type of this DecisionRecord.  # noqa: E501
        :type plugin_type: PluginType
        :param decision_value: The decision_value of this DecisionRecord.  # noqa: E501
        :type decision_value: str
        :param decided_by: The decided_by of this DecisionRecord.  # noqa: E501
        :type decided_by: str
        :param details: The details of this DecisionRecord.  # noqa: E501
        :type details: str
        :param timestamp: The timestamp of this DecisionRecord.  # noqa: E501
        :type timestamp: datetime
        """
        self.swagger_types = {
            'id': str,
            'session_id': str,
            'area_id': int,
            'decision_type': DecisionType,
            'plugin_type': PluginType,
            'decision_value': str,
            'decided_by': str,
            'details': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'session_id': 'sessionId',
            'area_id': 'areaId',
            'decision_type': 'decisionType',
            'plugin_type': 'pluginType',
            'decision_value': 'decisionValue',
            'decided_by': 'decidedBy',
            'details': 'details',
            'timestamp': 'timestamp'
        }
        self._id = id
        self._session_id = session_id
        self._area_id = area_id
        self._decision_type = decision_type
        self._plugin_type = plugin_type
        self._decision_value = decision_value
        self._decided_by = decided_by
        self._details = details
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'DecisionRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DecisionRecord of this DecisionRecord.  # noqa: E501
        :rtype: DecisionRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DecisionRecord.


        :return: The id of this DecisionRecord.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DecisionRecord.


        :param id: The id of this DecisionRecord.
        :type id: str
        """

        self._id = id

    @property
    def session_id(self) -> str:
        """Gets the session_id of this DecisionRecord.


        :return: The session_id of this DecisionRecord.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id: str):
        """Sets the session_id of this DecisionRecord.


        :param session_id: The session_id of this DecisionRecord.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def area_id(self) -> int:
        """Gets the area_id of this DecisionRecord.


        :return: The area_id of this DecisionRecord.
        :rtype: int
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id: int):
        """Sets the area_id of this DecisionRecord.


        :param area_id: The area_id of this DecisionRecord.
        :type area_id: int
        """

        self._area_id = area_id

    @property
    def decision_type(self) -> DecisionType:
        """Gets the decision_type of this DecisionRecord.


        :return: The decision_type of this DecisionRecord.
        :rtype: DecisionType
        """
        return self._decision_type

    @decision_type.setter
    def decision_type(self, decision_type: DecisionType):
        """Sets the decision_type of this DecisionRecord.


        :param decision_type: The decision_type of this DecisionRecord.
        :type decision_type: DecisionType
        """

        self._decision_type = decision_type

    @property
    def plugin_type(self) -> PluginType:
        """Gets the plugin_type of this DecisionRecord.


        :return: The plugin_type of this DecisionRecord.
        :rtype: PluginType
        """
        return self._plugin_type

    @plugin_type.setter
    def plugin_type(self, plugin_type: PluginType):
        """Sets the plugin_type of this DecisionRecord.


        :param plugin_type: The plugin_type of this DecisionRecord.
        :type plugin_type: PluginType
        """

        self._plugin_type = plugin_type

    @property
    def decision_value(self) -> str:
        """Gets the decision_value of this DecisionRecord.


        :return: The decision_value of this DecisionRecord.
        :rtype: str
        """
        return self._decision_value

    @decision_value.setter
    def decision_value(self, decision_value: str):
        """Sets the decision_value of this DecisionRecord.


        :param decision_value: The decision_value of this DecisionRecord.
        :type decision_value: str
        """

        self._decision_value = decision_value

    @property
    def decided_by(self) -> str:
        """Gets the decided_by of this DecisionRecord.


        :return: The decided_by of this DecisionRecord.
        :rtype: str
        """
        return self._decided_by

    @decided_by.setter
    def decided_by(self, decided_by: str):
        """Sets the decided_by of this DecisionRecord.


        :param decided_by: The decided_by of this DecisionRecord.
        :type decided_by: str
        """

        self._decided_by = decided_by

    @property
    def details(self) -> str:
        """Gets the details of this DecisionRecord.


        :return: The details of this DecisionRecord.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details: str):
        """Sets the details of this DecisionRecord.


        :param details: The details of this DecisionRecord.
        :type details: str
        """

        self._details = details

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this DecisionRecord.


        :return: The timestamp of this DecisionRecord.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this DecisionRecord.


        :param timestamp: The timestamp of this DecisionRecord.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
