# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AlgorithmResultRecord(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, session_id: str=None, area_id: int=None, name: str=None, result: Dict[str, object]=None, timestamp: datetime=None):  # noqa: E501
        """AlgorithmResultRecord - a model defined in Swagger

        :param session_id: The session_id of this AlgorithmResultRecord.  # noqa: E501
        :type session_id: str
        :param area_id: The area_id of this AlgorithmResultRecord.  # noqa: E501
        :type area_id: int
        :param name: The name of this AlgorithmResultRecord.  # noqa: E501
        :type name: str
        :param result: The result of this AlgorithmResultRecord.  # noqa: E501
        :type result: Dict[str, object]
        :param timestamp: The timestamp of this AlgorithmResultRecord.  # noqa: E501
        :type timestamp: datetime
        """
        self.swagger_types = {
            'session_id': str,
            'area_id': int,
            'name': str,
            'result': Dict[str, object],
            'timestamp': datetime
        }

        self.attribute_map = {
            'session_id': 'sessionId',
            'area_id': 'areaId',
            'name': 'name',
            'result': 'result',
            'timestamp': 'timestamp'
        }
        self._session_id = session_id
        self._area_id = area_id
        self._name = name
        self._result = result
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'AlgorithmResultRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlgorithmResultRecord of this AlgorithmResultRecord.  # noqa: E501
        :rtype: AlgorithmResultRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_id(self) -> str:
        """Gets the session_id of this AlgorithmResultRecord.


        :return: The session_id of this AlgorithmResultRecord.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id: str):
        """Sets the session_id of this AlgorithmResultRecord.


        :param session_id: The session_id of this AlgorithmResultRecord.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def area_id(self) -> int:
        """Gets the area_id of this AlgorithmResultRecord.


        :return: The area_id of this AlgorithmResultRecord.
        :rtype: int
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id: int):
        """Sets the area_id of this AlgorithmResultRecord.


        :param area_id: The area_id of this AlgorithmResultRecord.
        :type area_id: int
        """

        self._area_id = area_id

    @property
    def name(self) -> str:
        """Gets the name of this AlgorithmResultRecord.


        :return: The name of this AlgorithmResultRecord.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AlgorithmResultRecord.


        :param name: The name of this AlgorithmResultRecord.
        :type name: str
        """

        self._name = name

    @property
    def result(self) -> Dict[str, object]:
        """Gets the result of this AlgorithmResultRecord.


        :return: The result of this AlgorithmResultRecord.
        :rtype: Dict[str, object]
        """
        return self._result

    @result.setter
    def result(self, result: Dict[str, object]):
        """Sets the result of this AlgorithmResultRecord.


        :param result: The result of this AlgorithmResultRecord.
        :type result: Dict[str, object]
        """

        self._result = result

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this AlgorithmResultRecord.


        :return: The timestamp of this AlgorithmResultRecord.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this AlgorithmResultRecord.


        :param timestamp: The timestamp of this AlgorithmResultRecord.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
